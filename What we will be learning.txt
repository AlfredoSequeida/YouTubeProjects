Agenda/Schedule

- Introduction

- The Best way to learn to program is by working on projects

- Quick Poll:
    - Noob: New to programming
    - Beginner: Know some Python
    - Intermediate: Know Python and are comfortable enough to create a program on your own,
                    but don't know everything about Python
    - Advanced: Master ðŸ§˜

- Thinking like a programmer

- Setting up Python/Env
    - Download Python and Install
        https://www.python.org/

    - Writing Python code (Text editor vs IDE)
        - Text Editors
            - https://code.visualstudio.com/
            - https://www.vim.org/
            - https://www.sublimetext.com/
            - https://atom.io/
            - https://notepad-plus-plus.org/

        - Integrated Development Environments
            - IDLE (Comes preinstalled with Python's standard toolset)
            - https://www.jetbrains.com/pycharm/
            - https://www.spyder-ide.org/
            - https://www.pydev.org/

- Learning Python
    - Brief Introduction to Documentation
        https://docs.python.org/3/

        - Other examples of documentation
            https://docs.djangoproject.com/en/3.1/
            https://requests.readthedocs.io/en/master/
            https://docs.python.org/3/library/stdtypes.html#str.split (more on this after learning Python basics)

    - The Python Interpreter and Getting Started with Python
        Skip (You should look through these once you are more comfortable with basic programming concepts): 
            8. Errors and Exceptions (https://docs.python.org/3/tutorial/errors.html)
            9. Classes (https://docs.python.org/3/tutorial/classes.html)
            10. Brief Tour of the Standard Library (https://docs.python.org/3/tutorial/stdlib.html)
            11. Brief Tour of the Standard Library â€” Part II (https://docs.python.org/3/tutorial/stdlib2.html)
            12. Virtual Environments and Packages (https://docs.python.org/3/tutorial/venv.html)
            13. What Now? (https://docs.python.org/3/tutorial/whatnow.html)
            14. Interactive Input Editing and History Substitution (https://docs.python.org/3/tutorial/interactive.html)
            15. Floating Point Arithmetic: Issues and Limitations (https://docs.python.org/3/tutorial/floatingpoint.html)
            16. Appendix (https://docs.python.org/3/tutorial/appendix.html)

        1. Whetting Your Appetite (https://docs.python.org/3/tutorial/appetite.html)
            - Personal Project Showcase that we can go over later:
                https://alfredo.lol (Redirects to my YouTube Channel) (The backend for this site was also built using Python)
                https://sellphone.io

        2. Using the Python Interpreter (https://docs.python.org/3/tutorial/interpreter.html)
        3. An Informal Introduction to Python (https://docs.python.org/3/tutorial/introduction.html)

        (Switch to code editor)

        4. More Control Flow Tools (https://docs.python.org/3/tutorial/controlflow.html)
        5. Data Structures (https://docs.python.org/3/tutorial/datastructures.html)

        Optional (we might skip these topics):
            - 5.1.1. Using Lists as Stacks
            - 5.1.2. Using Lists as Queues
            - 5.1.3. List Comprehensions

        6. Modules (https://docs.python.org/3/tutorial/modules.html)

        Optional (we might skip these topics):
            - 6.1.3 -> 6.4.3 [The end of the section]

        7. Input and Output (https://docs.python.org/3/tutorial/inputoutput.html)

    - Applying Python
        Built-in Types: https://docs.python.org/3/library/stdtypes.html#str.split (more on this after learning Python basics)

    - Let's build a program!
        - More things you can do with the program on your own (FROM EASY TO MORE DIFFICULT):
            - Add more fields to a contact (for example emails, addresses, and images)
            - Make it so that you can store duplicates for people that have
              the same names
            - Store the contacts in a file so that you won't lose them when
              you restart the program JSON would be a good way to achieve this (https://docs.python.org/3/tutorial/inputoutput.html#saving-structured-data-with-json)
            - Add functions to validate data:
                - names (for example names can't have numbers)
                - phone numbers (for example in the US numbers are 10 digits long including area codes and can't have letters)
                - the same can be done for any other fields you add email, addresses

    - Using PIP (package installer for Python) 
        - The Python Package Index (https://pypi.org/)